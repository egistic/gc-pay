"""Add distribution functionality and SUB_REGISTRAR role

Revision ID: ac699b6a4981
Revises: dbaffdb0e4a2
Create Date: 2025-09-09 19:03:34.767401

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ac699b6a4981'
down_revision = 'dbaffdb0e4a2'
branch_labels = None
depends_on = None


def upgrade() -> None:
# ### commands auto generated by Alembic - please adjust! ###
    op.create_table('contracts',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('counterparty_id', sa.Uuid(), nullable=False),
    sa.Column('contract_number', sa.String(length=128), nullable=False),
    sa.Column('contract_date', sa.Date(), nullable=False),
    sa.Column('contract_type', sa.String(length=64), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['counterparty_id'], ['counterparties.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('expense_splits',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('request_id', sa.Uuid(), nullable=False),
    sa.Column('expense_item_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('comment', sa.String(length=1000), nullable=True),
    sa.Column('contract_id', sa.String(length=128), nullable=True),
    sa.Column('priority', sa.String(length=32), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['expense_item_id'], ['expense_articles.id'], ),
    sa.ForeignKeyConstraint(['request_id'], ['payment_requests.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('closing_document_files')
    op.drop_table('closing_documents')
    # responsible_registrar_id column already exists
    # op.add_column('payment_requests', sa.Column('responsible_registrar_id', sa.Uuid(), nullable=True))
    # op.create_foreign_key('fk_payment_requests_responsible_registrar', 'payment_requests', 'users', ['responsible_registrar_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
# ### commands auto generated by Alembic - please adjust! ###
    op.create_table('closing_document_files',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('closing_document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('storage_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['closing_document_id'], ['closing_documents.id'], name='closing_document_files_closing_document_id_fkey'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], name='closing_document_files_uploaded_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='closing_document_files_pkey')
    )
    op.create_table('closing_documents',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('request_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('document_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('document_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('amount_without_vat', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('vat_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('original_documents_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name='closing_documents_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['request_id'], ['payment_requests.id'], name='closing_documents_request_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='closing_documents_pkey')
    )
    # responsible_registrar_id column already exists
    # op.drop_constraint('fk_payment_requests_responsible_registrar', 'payment_requests', type_='foreignkey')
    # op.drop_column('payment_requests', 'responsible_registrar_id')
    op.drop_table('expense_splits')
    op.drop_table('contracts')
    # ### end Alembic commands ###
